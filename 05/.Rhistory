}
plot(x,y)
lines(tg,mtg)
h = .03
mtg <- c()
for(i in 1:length(tg)){
x.t <- x-tg[i]
weight <- dnorm(x.t/h)
m <- lm(y~x.t, weights = weight)
mtg[i] <- m$coefficients[1]
}
plot(x,y)
lines(tg,mtg)
# SPAM E-mail Database
# downloaded from
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.info.txt
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.data
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.traintest
# 03-05-2016
#
#
#
spam <- read.table("spambase/spambase.data",sep=",")
# SPAM E-mail Database
# downloaded from
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.info.txt
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.data
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.traintest
# 03-05-2016
#
#
#
spam <- read.table("spambase/spambase.data",sep=",")
setwd("~/Desktop/UPC/3r/ASM/PedroD/Adv-Statistical-Modelling/05")
# SPAM E-mail Database
# downloaded from
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.info.txt
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.data
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.traintest
# 03-05-2016
#
#
#
spam <- read.table("spambase/spambase.data",sep=",")
spam.names <- c(read.table("spambase/spambase.names",sep=":",skip=33,nrows=53,as.is=TRUE)[,1],
"char_freq_#",
read.table("spambase/spambase.names",sep=":",skip=87,nrows=3,as.is=TRUE)[,1],
"spam.01")
names(spam) <- spam.names
n<-dim(spam)[1]
p<-dim(spam)[2]-1
spam.01 <- spam[,p+1]
spam.vars <- as.matrix(spam[,1:p])
cat(paste("n = ",n,', p = ',p,sep=""))
cat(paste("Proportion of spam e-mails =",round(mean(spam.01),2),sep=""))
glm.spam <- glm(spam.01 ~ spam.vars,family=binomial)
summary(glm.spam)
# SPAM E-mail Database
# downloaded from
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.info.txt
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.data
# http://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.traintest
# 03-05-2016
#
#
#
spam <- read.table("spambase/spambase.data",sep=",")
spam.names <- c(read.table("spambase/spambase.names",sep=":",skip=33,nrows=53,as.is=TRUE)[,1],
"char_freq_#",
read.table("spambase/spambase.names",sep=":",skip=87,nrows=3,as.is=TRUE)[,1],
"spam.01")
names(spam) <- spam.names
n<-dim(spam)[1]
p<-dim(spam)[2]-1
spam.01 <- spam[,p+1]
spam.vars <- as.matrix(spam[,1:p])
cat(paste("n = ",n,', p = ',p,sep=""))
cat(paste("Proportion of spam e-mails =",round(mean(spam.01),2),sep=""))
glm.spam <- glm(spam.01 ~ spam.vars,family=binomial)
summary(glm.spam)
View(glm.spam)
glm.spam[["data"]][["spam.01"]]
View(spam)
data.frame(x=mean(mtcars$wt)
sda
data.frame(x=mean(mtcars$wt))
library("data.table")
library("knitr")
library("glmnet")
install.packages("glmnet")
source("spam.R")
totalNumObs = nrow(spam)
mail.spam = spam[which(spam$spam.01 == 1), ]
mail.non.spam = spam[which(spam$spam.01 == 0), ]
## Proportions of Spam
train.prop.spam = 2*nrow(mail.spam)/3
spam.training = mail.spam[1:train.prop.spam,]
spam.val = mail.spam[train.prop.spam:nrow(mail.spam),]
## Proportions non-spam
train.prop.no.spam = 2*nrow(mail.non.spam)/3
non.spam.training = mail.non.spam[1:train.prop.no.spam,]
non.spam.val = mail.non.spam[train.prop.no.spam:nrow(mail.non.spam),]
train.set = rbind(spam.training, non.spam.training)
val.set = rbind(spam.val, non.spam.val)
## Scaling and centering
sc.train.set <- scale(train.set[, 1:57])
sc.train.set <- as.data.frame(sc.train.set)
colnames(sc.train.set) <- colnames(train.set[, 1:57])
train.set.spam <- train.set[, 58]
mat.train.set <- as.matrix(train.set)
mean.train.set <- mean(mat.train.set)
sd.train.set <- sd(mat.train.set)
# Scale validation set
sc.val.set <- (val.set[, 1:57] - mean.train.set)/sd.train.set
true.val.spam <- val.set$spam.01
train.set.spam
sc.train.set
nrow(sc.train.set)
log.reg.fit <- glm(as.matrix(train.set.spam) ~ as.matrix(sc.train.set))
y.pred <- predict(log.reg.fit, sc.val.set)
y.pred <- predict(log.reg.fit, as.matrix(sc.val.set))
y.pred <- predict(log.reg.fit, data.frame(sc.val.set))
library("data.table")
library("knitr")
library("glmnet")
source("spam.R")
library("data.table")
library("knitr")
library("glmnet")
source("spam.R")
totalNumObs = nrow(spam)
mail.spam = spam[which(spam$spam.01 == 1), ]
mail.non.spam = spam[which(spam$spam.01 == 0), ]
## Proportions of Spam
train.prop.spam = 2*nrow(mail.spam)/3
spam.training = mail.spam[1:train.prop.spam,]
spam.val = mail.spam[train.prop.spam:nrow(mail.spam),]
## Proportions non-spam
train.prop.no.spam = 2*nrow(mail.non.spam)/3
non.spam.training = mail.non.spam[1:train.prop.no.spam,]
non.spam.val = mail.non.spam[train.prop.no.spam:nrow(mail.non.spam),]
## Merging
train.set = rbind(spam.training, non.spam.training)
val.set = rbind(spam.val, non.spam.val)
## Scaling and centering
train.set.spam <- train.set[, 58]
sc.train.set <- scale(train.set[, 1:57])
sc.train.set <- data.frame(sc.train.set, "spam.01" = train.set.spam)
mat.train.set <- as.matrix(train.set)
mean.train.set <- mean(mat.train.set)
sd.train.set <- sd(mat.train.set)
# Scale validation set
sc.val.set <- (val.set[, 1:57] - mean.train.set)/sd.train.set
sc.val.set <- as.data.frame(sc.val.set)
colnames(sc.val.set) <- names(sc.train.set[, 1:57])
true.val.spam <- val.set$spam.01
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set)
y.pred <- predict(log.reg.fit, sc.val.set)
y.pred
sc.train.set$spam.01 <- as.factor(sc.train.set$spam.01)
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set)
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link="logit"))
y.pred <- predict(log.reg.fit, sc.val.set)
y.pred
library(caret)
knitr::opts_chunk$set(echo = TRUE)
spam <- read.table("spambase.data",sep=",")
predict
y.pred <- predict.glm(log.reg.fit, sc.val.set, type = "response")
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link="logit"))
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link="logit"))
y.pred <- predict.glm(log.reg.fit, sc.val.set, type = "response")
y.pred
library("data.table")
library("knitr")
library("glmnet")
library("caret")
library("pROC")
install.packages("ROCR")
library("data.table")
library("knitr")
library("glmnet")
library("caret")
#library("pROC")
library("ROCR")
library(ROCR)
pr <- prediction(y.pred, spam.01)
pr <- prediction(y.pred, sc.val.set)
library("data.table")
library("knitr")
library("glmnet")
library("caret")
#library("pROC")
library("ROCR")
source("spam.R")
totalNumObs = nrow(spam)
mail.spam = spam[which(spam$spam.01 == 1), ]
mail.non.spam = spam[which(spam$spam.01 == 0), ]
## Proportions of Spam
train.prop.spam = 2*nrow(mail.spam)/3
spam.training = mail.spam[1:train.prop.spam,]
spam.val = mail.spam[train.prop.spam:nrow(mail.spam),]
## Proportions non-spam
train.prop.no.spam = 2*nrow(mail.non.spam)/3
non.spam.training = mail.non.spam[1:train.prop.no.spam,]
non.spam.val = mail.non.spam[train.prop.no.spam:nrow(mail.non.spam),]
## Merging
train.set = rbind(spam.training, non.spam.training)
val.set = rbind(spam.val, non.spam.val)
## Scaling and centering
train.set.spam <- train.set[, 58]
sc.train.set <- scale(train.set[, 1:57])
sc.train.set <- data.frame(sc.train.set, "spam.01" = as.factor(train.set.spam))
mat.train.set <- as.matrix(train.set)
mean.train.set <- mean(mat.train.set)
sd.train.set <- sd(mat.train.set)
# Scale validation set
sc.val.set <- (val.set[, 1:57] - mean.train.set)/sd.train.set
sc.val.set <- as.data.frame(sc.val.set)
colnames(sc.val.set) <- names(sc.train.set[, 1:57])
true.val.spam <- val.set$spam.01
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="prob")
y.pred <- predict(log.reg.fit, sc.val.set, type="link")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
y.pred <- predict(log.reg.fit, sc.val.set, type="link")
y.pred <- predict(log.reg.fit, sc.val.set, type="terms")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
y.pred <- predict(log.reg.fit, sc.val.set, type="response")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
# Confusion matrix
cm = confusionMatrix(data = as.factor(y.pred), as.factor(true.val.spam))
library("data.table")
library("knitr")
library("glmnet")
library("caret")
#library("pROC")
library("ROCR")
source("spam.R")
totalNumObs = nrow(spam)
mail.spam = spam[which(spam$spam.01 == 1), ]
mail.non.spam = spam[which(spam$spam.01 == 0), ]
## Proportions of Spam
train.prop.spam = 2*nrow(mail.spam)/3
spam.training = mail.spam[1:train.prop.spam,]
spam.val = mail.spam[train.prop.spam:nrow(mail.spam),]
## Proportions non-spam
train.prop.no.spam = 2*nrow(mail.non.spam)/3
non.spam.training = mail.non.spam[1:train.prop.no.spam,]
non.spam.val = mail.non.spam[train.prop.no.spam:nrow(mail.non.spam),]
## Merging
train.set = rbind(spam.training, non.spam.training)
val.set = rbind(spam.val, non.spam.val)
## Scaling and centering
train.set.spam <- train.set[, 58]
sc.train.set <- scale(train.set[, 1:57])
sc.train.set <- data.frame(sc.train.set, "spam.01" = as.factor(train.set.spam))
mat.train.set <- as.matrix(train.set)
mean.train.set <- mean(mat.train.set)
sd.train.set <- sd(mat.train.set)
# Scale validation set
sc.val.set <- (val.set[, 1:57] - mean.train.set)/sd.train.set
sc.val.set <- as.data.frame(sc.val.set)
colnames(sc.val.set) <- names(sc.train.set[, 1:57])
true.val.spam <- val.set$spam.01
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="response")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
plot(log.reg.fit)
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
library("data.table")
library("knitr")
library("glmnet")
library("caret")
#library("pROC")
library("ROCR")
source("spam.R")
totalNumObs = nrow(spam)
mail.spam = spam[which(spam$spam.01 == 1), ]
mail.non.spam = spam[which(spam$spam.01 == 0), ]
## Proportions of Spam
train.prop.spam = 2*nrow(mail.spam)/3
spam.training = mail.spam[1:train.prop.spam,]
spam.val = mail.spam[train.prop.spam:nrow(mail.spam),]
## Proportions non-spam
train.prop.no.spam = 2*nrow(mail.non.spam)/3
non.spam.training = mail.non.spam[1:train.prop.no.spam,]
non.spam.val = mail.non.spam[train.prop.no.spam:nrow(mail.non.spam),]
## Merging
train.set = rbind(spam.training, non.spam.training)
val.set = rbind(spam.val, non.spam.val)
## Scaling and centering
train.set.spam <- train.set[, 58]
sc.train.set <- scale(train.set[, 1:57])
sc.train.set <- data.frame(sc.train.set, "spam.01" = as.factor(train.set.spam))
mat.train.set <- as.matrix(train.set)
mean.train.set <- mean(mat.train.set)
sd.train.set <- sd(mat.train.set)
# Scale validation set
sc.val.set <- (val.set[, 1:57] - mean.train.set)/sd.train.set
sc.val.set <- as.data.frame(sc.val.set)
colnames(sc.val.set) <- names(sc.train.set[, 1:57])
true.val.spam <- val.set$spam.01
library("data.table")
library("knitr")
library("glmnet")
library("caret")
#library("pROC")
library("ROCR")
source("spam.R")
totalNumObs = nrow(spam)
mail.spam = spam[which(spam$spam.01 == 1), ]
mail.non.spam = spam[which(spam$spam.01 == 0), ]
## Proportions of Spam
train.prop.spam = 2*nrow(mail.spam)/3
spam.training = mail.spam[1:train.prop.spam,]
spam.val = mail.spam[train.prop.spam:nrow(mail.spam),]
## Proportions non-spam
train.prop.no.spam = 2*nrow(mail.non.spam)/3
non.spam.training = mail.non.spam[1:train.prop.no.spam,]
non.spam.val = mail.non.spam[train.prop.no.spam:nrow(mail.non.spam),]
## Merging
train.set = rbind(spam.training, non.spam.training)
val.set = rbind(spam.val, non.spam.val)
## Scaling and centering
train.set.spam <- train.set[, 58]
sc.train.set <- scale(train.set[, 1:57])
sc.train.set <- data.frame(sc.train.set, "spam.01" = as.factor(train.set.spam))
mat.train.set <- as.matrix(train.set)
mean.train.set <- mean(mat.train.set)
sd.train.set <- sd(mat.train.set)
# Scale validation set
sc.val.set <- (val.set[, 1:57] - mean.train.set)/sd.train.set
sc.val.set <- as.data.frame(sc.val.set)
colnames(sc.val.set) <- names(sc.train.set[, 1:57])
true.val.spam <- val.set$spam.01
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="link")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="link")
y.pred <- predict(log.reg.fit, sc.val.set, type="link")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
library("data.table")
library("knitr")
library("glmnet")
library("caret")
#library("pROC")
library("ROCR")
source("spam.R")
totalNumObs = nrow(spam)
mail.spam = spam[which(spam$spam.01 == 1), ]
mail.non.spam = spam[which(spam$spam.01 == 0), ]
## Proportions of Spam
train.prop.spam = 2*nrow(mail.spam)/3
spam.training = mail.spam[1:train.prop.spam,]
spam.val = mail.spam[train.prop.spam:nrow(mail.spam),]
## Proportions non-spam
train.prop.no.spam = 2*nrow(mail.non.spam)/3
non.spam.training = mail.non.spam[1:train.prop.no.spam,]
non.spam.val = mail.non.spam[train.prop.no.spam:nrow(mail.non.spam),]
## Merging
train.set = rbind(spam.training, non.spam.training)
val.set = rbind(spam.val, non.spam.val)
## Scaling and centering
train.set.spam <- train.set[, 58]
sc.train.set <- scale(train.set[, 1:57])
sc.train.set <- data.frame(sc.train.set, "spam.01" = as.factor(train.set.spam))
mat.train.set <- as.matrix(train.set)
mean.train.set <- mean(mat.train.set)
sd.train.set <- sd(mat.train.set)
# Scale validation set
sc.val.set <- (val.set[, 1:57] - mean.train.set)/sd.train.set
sc.val.set <- as.data.frame(sc.val.set)
colnames(sc.val.set) <- names(sc.train.set[, 1:57])
true.val.spam <- val.set$spam.01
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="terms")
y.pred <- predict(log.reg.fit, sc.val.set, type="terms")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
library("data.table")
library("knitr")
library("glmnet")
library("caret")
#library("pROC")
library("ROCR")
source("spam.R")
totalNumObs = nrow(spam)
mail.spam = spam[which(spam$spam.01 == 1), ]
mail.non.spam = spam[which(spam$spam.01 == 0), ]
## Proportions of Spam
train.prop.spam = 2*nrow(mail.spam)/3
spam.training = mail.spam[1:train.prop.spam,]
spam.val = mail.spam[train.prop.spam:nrow(mail.spam),]
## Proportions non-spam
train.prop.no.spam = 2*nrow(mail.non.spam)/3
non.spam.training = mail.non.spam[1:train.prop.no.spam,]
non.spam.val = mail.non.spam[train.prop.no.spam:nrow(mail.non.spam),]
## Merging
train.set = rbind(spam.training, non.spam.training)
val.set = rbind(spam.val, non.spam.val)
## Scaling and centering
train.set.spam <- train.set[, 58]
sc.train.set <- scale(train.set[, 1:57])
sc.train.set <- data.frame(sc.train.set, "spam.01" = as.factor(train.set.spam))
mat.train.set <- as.matrix(train.set)
mean.train.set <- mean(mat.train.set)
sd.train.set <- sd(mat.train.set)
# Scale validation set
sc.val.set <- (val.set[, 1:57] - mean.train.set)/sd.train.set
sc.val.set <- as.data.frame(sc.val.set)
colnames(sc.val.set) <- names(sc.train.set[, 1:57])
true.val.spam <- val.set$spam.01
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="response")
y.pred <- predict(log.reg.fit, sc.val.set, type="response")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
# Confusion matrix
cm = confusionMatrix(data = as.factor(y.pred), as.factor(true.val.spam))
cm$table
cm$byClass
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="terms")
y.pred <- predict(log.reg.fit, sc.val.set, type="terms")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
cm$table
cm$byClass
cm$overall
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="link")
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="link")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
summary(y.pred)
plot(log.reg.fit)
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="link")
y.pred <- ifelse(y.pred >= 0.5,1,0)
head(y.pred)
summary(y.pred)
plot(log.reg.fit)
# Confusion matrix
cm = confusionMatrix(data = as.factor(y.pred), as.factor(true.val.spam))
# Confusion matrix
cm = confusionMatrix(data = as.factor(y.pred), as.factor(true.val.spam))
cm$table
cm$byClass
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
log.reg.fit <- glm(spam.01 ~ ., data=sc.train.set, family = binomial(link = "logit"))
y.pred <- predict(log.reg.fit, sc.val.set, type="response")
y.pred <- predict(log.reg.fit, sc.val.set, type="response")
y.pred <- ifelse(y.pred >= 0.5,1,0)
summary(y.pred)
plot(log.reg.fit)
plot(log.reg.fit)
# Confusion matrix
cm = confusionMatrix(data = as.factor(y.pred), as.factor(true.val.spam))
# Confusion matrix
cm = confusionMatrix(data = as.factor(y.pred), as.factor(true.val.spam))
cm$table
cm$byClass
cm$overall
pred <- prediction(y.pred, true.val.spam)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(7), main="ROC curve", xlab="Specificity",
ylab="Sensitivity")
abline(0, 1) #add a 45 degree line
library(ROCR)
pred <- prediction(y.pred, true.val.spam)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(7), main="ROC curve", xlab="Specificity",
ylab="Sensitivity")
abline(0, 1) #add a 45 degree line
